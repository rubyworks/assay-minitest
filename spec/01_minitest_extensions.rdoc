= MiniTest Compatible Extensions

  require 'assay/minitest'

  class ::Object
    include ::Assay::Extensions
  end

== must_be

  1.must_be(:<, 2)
  1.must_be(:odd?)

  expect ::ExecutionAssay do
    1.wont_be(:<, 2)
  end

  1.wont_be(:>, 2)
  1.wont_be(:even?)

== must_equal

  1.must_equal(1)

  expect ::EqualAssay do
    1.must_equal(2)
  end

  1.wont_equal(2)

== TrueAssay

  true.must_be_true

  expect ::TrueAssay do
    false.must_be_true
  end

  false.wont_be_true

== must_be_false

  false.must_be_false

  expect ::FalseAssay do
    true.must_be_false
  end

  true.wont_be_false

== must_be_nil

  nil.must_be_nil

  expect ::NilAssay do
    true.must_be_nil
  end

  false.wont_be_nil

== must_be_empty

  [].must_be_empty

  expect ::EmptyAssay do
    [1].must_be_empty
  end

  [1].wont_be_empty

== must_include

  [1].must_include(1)

  expect ::IncludeAssay do
    [1].must_include(2)
  end

  [1].wont_include(2)

== must_be_within_delta

  1.must_be_within_delta(2, 1.5)

  expect ::WithinAssay do
    1.must_be_within_delta(2, 0.5)
  end

  1.wont_be_within_delta(2, 0.5)

== must_match

  "abc".must_match(/a/)

  expect ::MatchAssay do
    "abc".must_match(/x/)
  end

  "abc".wont_match(/g/)

== must_eql

  1.must_eql(1)

  expect ::EqualityAssay do
    1.must_eql(1.0)
  end

  1.wont_eql(1.0)

== must_be_same_as

  :a.must_be_same_as(:a)

  expect ::IdentityAssay do
    "a".must_be_same_as("a")
  end

  :a.wont_be_same_as('a')

== must_be_instance_of

  1.must_be_instance_of(Fixnum)

  expect ::InstanceAssay do
    1.must_be_instance_of(String)
  end

  1.wont_be_instance_of(String)

== must_kind_of

  1.must_be_kind_of(Integer)

  expect ::KindAssay do
    1.must_be_kind_of(String)
  end

  1.wont_be_kind_of(String)

== must_raise

  procedure = lambda{ raise ::ArgumentError }

  procedure.must_raise(::ArgumentError)

  expect ::RaiseAssay do
    procedure.must_raise(::TypeError)
  end

  procedure.wont_raise(::TypeError)

== must_respond_to

  "string".must_respond_to(:upcase)

  expect ::RespondAssay do
    "string".must_respond_to(:not_a_method)
  end

  "string".wont_respond_to(:not_a_method)

== must_satisfy

  5.must_satisfy{ |x| x > 3 }

  expect ::ExecutionAssay do
    5.must_satisfy{ |x| x < 3 }
  end

  5.wont_satisfy{ |x| x < 3 }

== must_send

  5.must_send([:+, 1])

  expect ::ExecutionAssay do
    5.must_send([:upcase])
  end

  5.wont_send([:upcase])

== must_throw

  procedure = lambda{ throw :foo }

  procedure.must_throw(:foo)

  expect ::ThrowAssay do
    procedure.must_throw(:bar)
  end

  procedure.wont_throw(:bar)

== must_output

  procedure = lambda{ puts "fun!" }

  procedure.must_output('fun!')

  expect ::OutputAssay do
    procedure.must_output('not!')
  end

== must_be_like

The `#must_be_like` method is not a MiniText expectation, but we have thrown it
in for gooe measure.

  /a/.must_be_like('a')

  expect ::LikeAssay do
    'a'.must_be_like(10)
  end

  'a'.wont_be_like(10)

